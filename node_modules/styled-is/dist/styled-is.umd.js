(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('styled-components')) :
  typeof define === 'function' && define.amd ? define('styled-is', ['exports', 'styled-components'], factory) :
  (global = global || self, factory(global['styled-is'] = {}, global.styledComponents));
}(this, function (exports, styledComponents) { 'use strict';

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var styledIf = function styledIf(method, condition) {
    return function () {
      for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
        names[_key] = arguments[_key];
      }

      return function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return function (props) {
          return (method === 'match' ? props[names[0]] === names[1] : names[method](function (name) {
            return Boolean(props[name]) === condition;
          })) && styledComponents.css.apply(void 0, _toConsumableArray(handleFunctions(args, props)));
        };
      };
    };
  };

  var handleFunctions = function handleFunctions(args, props) {
    var css = '';

    for (var i = 1; i < args.length; i++) {
      if (typeof args[i] === 'function') {
        var output = args[i](props);

        if (typeof output === "string" && output.includes(':')) {
          css += output;
        }
      }
    }

    if (css) {
      var newArgs = args.slice(0);
      var argCss = args[0].slice(1);
      argCss.unshift(css + newArgs[0][0]);
      newArgs[0] = argCss;
      return newArgs;
    }

    return args;
  };

  var is = styledIf('every', true);
  var isNot = styledIf('every', false);
  var isOr = styledIf('some', true);
  var isSomeNot = styledIf('some', false);
  var match = styledIf('match');

  exports.default = is;
  exports.isNot = isNot;
  exports.isOr = isOr;
  exports.isSomeNot = isSomeNot;
  exports.match = match;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInNyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIFNvdXJjZSBDb2RlIEZvcm0gaXMgc3ViamVjdCB0byB0aGUgdGVybXMgb2YgdGhlIE1vemlsbGEgUHVibGljXG4vLyBMaWNlbnNlLCB2LiAyLjAuIElmIGEgY29weSBvZiB0aGUgTVBMIHdhcyBub3QgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzXG4vLyBmaWxlLCBZb3UgY2FuIG9idGFpbiBvbmUgYXQgaHR0cDovL21vemlsbGEub3JnL01QTC8yLjAvLlxuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IHN0eWxlZElmID0gKG1ldGhvZCwgY29uZGl0aW9uKSA9PiAoLi4ubmFtZXMpID0+ICguLi5hcmdzKSA9PiBwcm9wcyA9PiB7XG4gIHJldHVybiAoXG4gICAgKG1ldGhvZCA9PT0gJ21hdGNoJ1xuICAgICAgPyBwcm9wc1tuYW1lc1swXV0gPT09IG5hbWVzWzFdXG4gICAgICA6IG5hbWVzW21ldGhvZF0obmFtZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIEJvb2xlYW4ocHJvcHNbbmFtZV0pID09PSBjb25kaXRpb247XG4gICAgICAgIH0pKSAmJiBjc3MoLi4uaGFuZGxlRnVuY3Rpb25zKGFyZ3MsIHByb3BzKSlcbiAgKTtcbn07XG5cbmNvbnN0IGhhbmRsZUZ1bmN0aW9ucyA9IChhcmdzLCBwcm9wcykgPT4ge1xuICBsZXQgY3NzID0gJyc7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgYXJnc1tpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gYXJnc1tpXShwcm9wcyk7XG4gICAgICBpZiAodHlwZW9mIG91dHB1dCA9PT0gXCJzdHJpbmdcIiAmJiBvdXRwdXQuaW5jbHVkZXMoJzonKSkge1xuICAgICAgICBjc3MgKz0gb3V0cHV0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjc3MpIHtcbiAgICBjb25zdCBuZXdBcmdzID0gYXJncy5zbGljZSgwKTtcbiAgICBjb25zdCBhcmdDc3MgPSBhcmdzWzBdLnNsaWNlKDEpO1xuICAgIGFyZ0Nzcy51bnNoaWZ0KGNzcyArIG5ld0FyZ3NbMF1bMF0pO1xuICAgIG5ld0FyZ3NbMF0gPSBhcmdDc3M7XG4gICAgcmV0dXJuIG5ld0FyZ3M7XG4gIH1cblxuICByZXR1cm4gYXJncztcbn07XG5cbmNvbnN0IGlzID0gc3R5bGVkSWYoJ2V2ZXJ5JywgdHJ1ZSk7XG5jb25zdCBpc05vdCA9IHN0eWxlZElmKCdldmVyeScsIGZhbHNlKTtcbmNvbnN0IGlzT3IgPSBzdHlsZWRJZignc29tZScsIHRydWUpO1xuY29uc3QgaXNTb21lTm90ID0gc3R5bGVkSWYoJ3NvbWUnLCBmYWxzZSk7XG5jb25zdCBtYXRjaCA9IHN0eWxlZElmKCdtYXRjaCcpO1xuXG5leHBvcnQgZGVmYXVsdCBpcztcbmV4cG9ydCB7IGlzTm90LCBpc09yLCBpc1NvbWVOb3QsIG1hdGNoIH07XG4iXSwibmFtZXMiOlsiY3NzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQU1BLElBQUksUUFBUSxHQUFHLFNBQVMsUUFBUSxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7RUFDcEQsRUFBRSxPQUFPLFlBQVk7RUFDckIsSUFBSSxLQUFLLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtFQUM5RixNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7RUFDcEMsS0FBSzs7RUFFTCxJQUFJLE9BQU8sWUFBWTtFQUN2QixNQUFNLEtBQUssSUFBSSxLQUFLLEdBQUcs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